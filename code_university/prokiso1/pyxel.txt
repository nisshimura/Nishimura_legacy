1a 2
1b
for i in range(3):
    seed = randint(0, 2)
    self.barriers.append(
        [i*randrange(90,100,10), self.ground_y-self.b_d[seed][1][1]-self.b_d[seed][4], seed])
3種類の障害物からランダムに選択。障害物間の距離をランダムに設定。

if x < -40:
    seed = randint(0, 2)
    x += 240
    y = self.ground_y-self.b_d[seed][1][1]-self.b_d[seed][4]
障害物をランダムに変更。

2a 3
2b
self.b_d = {0: [[48, 18], [16, 14], [32, 32], [16, 16],0],  #OLLIE
                        1: [[32, 19], [16, 13], [48, 32], [16, 16],0],   #HIPPIE
                        2: [[64, 32], [16, 24], [0, 48], [16, 16],8]    #BACK
                        }
self.s_d = {0: [[0, 0], [16, 16]],  #normal
                    1: [[0, 16], [16, 16]], #jump with board
                    2: [[32, 0], [16, 16]], #jump_onlyman
                    3: [[16, 8], [16, 8]], #board
                    4: [[48, 0], [16, 16]],  # mae age
                    5: [[0, 112], [16, 16]],  #usiro age
                    6: [[16, 24], [16, 8]],  # sleep
                    7: [[16, 48], [16, 16]],  # suc_hippie
                    8: [[32, 48], [16, 16]],  # suc_ollie
                    9: [[48, 48], [16, 16]],  # suc_back
                    10: [[80, 0], [16, 16]],  #ready push
                    11: [[80, 16], [16, 16]]  #do push
                    }

self.p_d = {0: [[64, 0], [16, 16]], #消灯
                    1: [[16, 32], [16, 16]] #点灯
                    }

self.b_g = {0: [[96,0],[256,32]],
            1: [[0,64],[160,112]]}
プレイヤー、障害物、警察の状態、.pyxresファイルにおける座標、サイズ等を辞書、リスト型を用いて実現。

[i*randrange(90,100,10), self.ground_y-self.b_d[seed][1][1]-self.b_d[seed][4], seed]
障害物の種類、ｙ座標、ｘ座標をリスト化

3a 1
3b 
class App
クラスは一つしか作らなかった。

4a 2
4b 
update_danger(self, seed, barrier_x, barrier_y)
ターゲットの座標を入れることで、プレイヤーと接触しているか確認する
is_crashed(self, target, status, player_x, player_y, enemy, e_status, barrier_x, barrier_y)
２者の座標、状態を入力することで接触しているか確認する。

5a 2
5b 
if pyxel.btn(pyxel.KEY_UP) or pyxel.btn(pyxel.GAMEPAD_1_UP) and self.player_vy == 0 and self.player_y == self.ground_y-self.s_d[self.p_s][1][1]:
    self.p_s = 1
    if self.player_y == self.ground_y-self.s_d[self.p_s][1][1]:
        self.player_vy += -32
    if self.player_vy < -32:
        self.player_vy = -32
プレイヤーのｙ軸上の加速度を追加する。
プレイヤーの状態をジャンプに変更する。

if pyxel.btn(pyxel.KEY_DOWN) or pyxel.btn(pyxel.GAMEPAD_1_DOWN):
    if self.player_y >= self.ground_y-16:
        self.p_s = 6
        self.player_y = self.ground_y-8
    if self.player_vy >= 0:
        self.player_y += 1
    ジャンプ中に入力することで、ｙ軸上の加速度を減らす。
    地面にいるときは、プレイヤーの状態をbackに変更する。

if pyxel.btn(pyxel.KEY_SPACE):
    self.p_s = 2

プレイヤーの状態をhippieに変更する。
if pyxel.btn(pyxel.KEY_RIGHT):
    self.p_s = 4
    self.player_x += 1
プレイヤーの状態を右ollieに変更する。 
if pyxel.btn(pyxel.KEY_LEFT):
    self.p_s = 5
    self.player_x += -1
プレイヤーの状態を左ollieに変更する。 

6a 0
6b マウス座標を利用していない。

7a ?
7b ?

8a 1
8a プレイヤー、警察、障害物の3種類は異なる規則によって変化する。

9a 5
9b 
def is_crashed(self, target, status, player_x, player_y, enemy, e_status, barrier_x, barrier_y):
    if self.muteki:
        return False 
    if player_x < 0:
        player_x = 0
    if barrier_x < 0:
        barrier_x = 0
    for i in [1,0]:
        for j in [1,0]:
            print(barrier_x)
            print(barrier_x+enemy[e_status][1][0]+1)
            print(player_x)

            if barrier_x+enemy[e_status][1][0]+1 > barrier_x:
                if player_x+target[status][1][0]*i in [index for index in range(barrier_x, barrier_x+enemy[e_status][1][0]+1)]:
                    if player_y+target[status][1][1]*j in [index for index in range(barrier_y, barrier_y+enemy[e_status][1][1]-enemy[e_status][4]+1)]:
                        return True
            if barrier_x+enemy[e_status][1][0]+1 < barrier_x:
                if player_x+target[status][1][0]*i in [index for index in range(barrier_x, barrier_x+enemy[e_status][1][0]+1)]:
                    if player_y+target[status][1][1]*j in [index for index in range(barrier_y, barrier_y+enemy[e_status][1][1]-enemy[e_status][4]+1)]:
                        return True
2者が接触しているかの判定。辞書型とリスト型を併用したことで汎用性は高いが、複雑になってしまった。

10a 4
10b 
難しいので、時間を忘れてしまい、スコアが良いと達成感が得られるから。

11a 3
11b
ゲームの種類としては横スクロールアクションに該当されるが、スケボーを題材にしたゲームはあまり見られないから。

11
今まで触れることのなかった技術に触れることでインスピレーションが刺激された。